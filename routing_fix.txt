1. Copy `background.mp4` into `TrinityFrontend/public`. The login page now loads this video as the full-screen background.
   The frontend Docker image now includes a custom Nginx config so React routes
   like `/login` work correctly.

2. Update `TrinityBackendDjango/.env` with the following values so the app works from any IP or domain:
   - `ALLOWED_HOSTS=*` to accept requests from any domain.
   - `FRONTEND_URL=http://10.2.1.242:8080` or your external domain.
   - `CSRF_TRUSTED_ORIGINS=http://10.2.1.242:8080,https://trinity.quantmatrix.ai`
     so Django accepts login posts from both addresses.
   - `ADDITIONAL_DOMAINS=10.2.1.242,trinity.quantmatrix.ai` to map the default tenant to each hostname.

3. Rebuild and start the stack and re-run `create_tenant.py` to apply the new domain aliases. This will also rebuild the frontend image so the
   custom Nginx config is used:
   ```bash
   cd TrinityBackendDjango
   docker-compose up -d --build
   ```
4. Update `TrinityFrontend/.env` so the `VITE_*` variables (or `VITE_BACKEND_ORIGIN`) use `http://10.2.1.242:8000` or your Cloudflare domain. Set `FRONTEND_URL` in `TrinityBackendDjango/.env` to the same value.

5. Configure a Cloudflare Tunnel so the app is reachable at `https://trinity.quantmatrix.ai`:
   1. Install the `cloudflared` CLI and authenticate with `cloudflared login`.
   2. Create a tunnel and give it a name:
      `cloudflared tunnel create trinity`
   3. Map the tunnel to the frontend container:
      `cloudflared tunnel run trinity --url http://localhost:8080`
   4. In the Cloudflare dashboard, add a DNS CNAME record for
      `trinity.quantmatrix.ai` that points to the tunnel.
   5. Optionally expose the backend by running another tunnel to
      `http://localhost:8000`.

6. After rebuilding and restarting the containers you can access the app via the
   IP address (`http://10.2.1.242:8080`) or the `trinity.quantmatrix.ai` domain,
   log in, and manage clients or users without errors.

