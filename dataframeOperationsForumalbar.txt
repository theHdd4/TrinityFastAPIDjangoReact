DataFrame Operations Atom – Formula Bar API Usage
=================================================

Overview
--------
The DataFrame Operations atom exposes a formula bar that lets analysts transform a selected column without writing custom code. Toggle the calculator icon to open the bar, choose a target column header, type a formula that begins with `=` and press **Apply**. The UI queues the request through `apiApplyFormula`, which issues `POST /apply_formula` with the dataframe session id, target column name and formula text so the backend can compute the new values.【F:TrinityFrontend/src/components/AtomList/atoms/dataframe-operations/components/DataFrameOperationsCanvas.tsx†L788-L809】

Column Reference Rules
----------------------
* Always reference the visible column headers (`colA`, `Revenue`, `Invoice Date`, etc.) inside the formula. When you click a header the bar will highlight it as the active target.
* Wrap string or date literals in quotes, e.g. `"M"` or `"2024-01-01"`.
* Formulas must start with `=`. Non-formula input writes the literal text into the column.

Backend Evaluation
------------------
The `/apply_formula` route evaluates formulas row by row inside a constrained environment. Column names in the expression are replaced with row values, and only a vetted set of helper functions (IF, LOWER, DATE_DIFF, MAP, BIN, etc.) is available to `eval`. This allows rich transformations while preventing arbitrary code execution. The backend also keeps the existing CORR helper for full-column correlation and writes the computed series back to the selected column.【F:TrinityBackendFastAPI/app/features/dataframe_operations/app/routes.py†L283-L355】【F:TrinityBackendFastAPI/app/features/dataframe_operations/app/routes.py†L165-L273】

Quick Formula Library
---------------------
The formula helper exposes the following operations alongside the existing arithmetic and aggregation entries so you can paste them directly into the bar.【F:TrinityFrontend/src/components/AtomList/atoms/dataframe-operations/components/FormularBar.tsx†L33-L67】

### Aggregations & Math
* `=SUM(colA,colB)` – row-wise sum (ignores blanks).
* `=AVG(colA,colB)` / `=MEAN(colA,colB,colC)` – arithmetic mean of the provided columns.
* `=PROD(colA,colB)` – multiply values together.
* `=DIV(colA,colB)` – sequential division (`colA ÷ colB ÷ …`).
* `=MAX(colA,colB)` / `=MIN(colA,colB)` – row-wise extrema.
* `=CORR(colA,colB)` – fills the target column with the global Pearson correlation for `colA` vs `colB`.
* `=ABS(colA)` – absolute value.
* `=ROUND(colA, 2)` – round to 2 decimal places (second argument controls precision).
* `=FLOOR(colA)` / `=CEIL(colA)` – floor or ceiling for numeric columns.
* `=EXP(colA)` / `=LOG(colA)` / `=SQRT(colA)` – exponential, natural log and square root.
* `=colA ** 2` – exponentiation using Python operators.

### Conditional Logic & Binning
* `=IF(colA > 10, colB, colC)` – if/else using another column as fallback.
* `=IF(colA == "M", 1, 0)` – convert a categorical flag into numbers.
* `=IF(colA > colB, "High", "Low")` – tag rows based on column comparisons.
* `=IF(colA > 90, "High", IF(colA > 70, "Medium", "Low"))` – nested conditions for multi-level bins.
* `=BIN(colA, [0, 50, 100])` – label each value using numeric breakpoints (returns `<0`, `[0, 50)`, `[50, 100)` or `>=100`).

### Text Helpers
* `=LOWER(colA)` / `=UPPER(colA)` – force case.
* `=LEN(colA)` – length of the string representation (returns 0 for nulls).
* `=colA + colB` – concatenate strings or add numbers.
* `=SUBSTR(colA, 0, 5)` – substring using start/end indexes (exclusive end).
* `=STR_REPLACE(colA, "old", "new")` – replace substrings.
* `=MAP(colA, {"M": "Male", "F": "Female"})` – dictionary-based remapping with fallback to the original value.

### Date & Time
* `=YEAR(colDate)` / `=MONTH(colDate)` / `=DAY(colDate)` – extract components from ISO strings, timestamps or `datetime` cells.
* `=WEEKDAY(colDate)` – friendly weekday name (e.g., `Monday`).
* `=DATE_DIFF(colEnd, colStart)` – day difference (`colEnd - colStart`).

### Null Handling
* `=IF(ISNULL(colA), 0, colA)` – inline null coalescing.
* `=FILLNA(colA, 0)` – shorthand for the same behavior (accepts any replacement value).

Execution Example
-----------------
Submitting `=IF(colA > 10, colB, colC)` against column `Result` issues the following payload and rewrites the column with the evaluated values:

```json
POST /apply_formula
{
  "df_id": "<session-id>",
  "target_column": "Result",
  "formula": "=IF(colA > 10, colB, colC)"
}
```

The backend substitutes each row’s `colA`, `colB` and `colC` values, evaluates the IF expression with the registered helpers and returns the updated dataframe payload to the UI.【F:TrinityBackendFastAPI/app/features/dataframe_operations/app/routes.py†L283-L355】
