# Dimension Mapping Endpoint

**Endpoint**: `/api/feature-overview/dimension_mapping`

Send a POST request with JSON payload containing the client, app, and project names:

```json
{
  "client_name": "ACME",
  "app_name": "Orders",
  "project_name": "Revenue"
}
```

The server will log each step while resolving the environment, loading from
Redis, and falling back to MongoDB. The lookup key is constructed as
`<client_name>/<app_name>/<project_name>/column_classifier_config`.

When saving a configuration via `/api/column-classifier/save_config`, include
`client_name`, `app_name`, and `project_name` along with the identifiers,
measures, and dimensions. The backend resolves the environment variables and
and caches everything in Redis under `<client_name>/<app_name>/<project_name>/column_classifier_config`.
Feature overview reads the mapping using these names and falls back to MongoDB if Redis is empty. The document is
persisted in the `column_classifier_configs` collection in MongoDB.

Example payload for `/api/column-classifier/save_config`:

```json
{
  "client_name": "ACME",
  "app_name": "Orders",
  "project_name": "Revenue",
  "identifiers": ["sku"],
  "measures": ["amount"],
  "dimensions": {
    "product": ["sku"],
    "finance": ["amount"]
  }
}
```

The backend resolves the environment variables and returns a JSON response
confirming the MongoDB save result.

## Checking the saved configuration in Mongo Express

1. Ensure the Docker stack is running (`docker compose up -d` or `docker-compose-dev.yml`).
2. Open your browser to `http://localhost:8083` (development) or `http://localhost:8082` (production).
3. Log in with the credentials `admin` / `admin`.
4. In the sidebar select the `validator_atoms_db` database.
5. Click the `column_classifier_configs` collection.
6. Locate the document whose **_id** matches `<client_name>/<app_name>/<project_name>`.
7. Opening the document reveals the stored identifiers, measures, dimensions and environment values.
