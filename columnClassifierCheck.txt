The column classifier atom persists user dimension assignments through the backend's `/assign_identifiers_to_dimensions` endpoint.

**Frontend flow**
1. `ColumnClassifierDimensionConfig` renders the **Save Dimensions** button.
2. When clicked it triggers the `onSave` callback passed from `ColumnClassifierAtom`.
3. `ColumnClassifierAtom` implements `saveAssignments` which builds a `FormData` payload containing the current file's `customDimensions` and the selected project id from `localStorage`.
4. The function posts this data to `${CLASSIFIER_API}/assign_identifiers_to_dimensions`.

Relevant code:
- Save button and callback wiring【F:TrinityFrontend/src/components/AtomList/atoms/column-classifier/components/ColumnClassifierDimensionConfig.tsx†L88-L99】
- `saveAssignments` implementation with project id and fetch call【F:TrinityFrontend/src/components/AtomList/atoms/column-classifier/ColumnClassifierAtom.tsx†L132-L166】

**Backend saving**
1. `/assign_identifiers_to_dimensions` in `column_classifier/routes.py` parses the assignments and calls `save_project_dimension_mapping`.
2. `save_project_dimension_mapping` stores the document in the `project_dimension_mappings` collection under the id `project_<project_id>_dimensions`.

Relevant lines:
- Endpoint definition and MongoDB save call【F:TrinityBackendFastAPI/app/features/column_classifier/routes.py†L492-L545】
- Mongo save helper【F:TrinityBackendFastAPI/app/features/column_classifier/database.py†L275-L295】

The MongoDB database name and collection configuration come from `column_classifier/config.py`:
- Database: `validator_atoms_db`
- Collections: `business_dimensions_with_assignments`, `project_dimension_mappings`【F:TrinityBackendFastAPI/app/features/column_classifier/config.py†L30-L39】

**Retrieval for Feature Overview**
Feature overview uses the saved mapping to create reports. The `/dimension_mapping` route falls back to MongoDB when the mapping is not present on the flight server:
- It calls `get_project_dimension_mapping` to read `project_dimension_mappings` and uploads to the flight server if needed【F:TrinityBackendFastAPI/app/features/feature_overview/routes.py†L240-L276】
- The helper `get_project_dimension_mapping` simply reads the document from MongoDB【F:TrinityBackendFastAPI/app/features/column_classifier/database.py†L301-L308】

**Checking in Mongo Compass**
1. Connect to the MongoDB instance defined in `config.py` (`mongo_uri`).
2. Select the `validator_atoms_db` database.
3. Open `project_dimension_mappings` to view identifier assignments saved when **Save Dimensions** was clicked. Documents are keyed by `project_<project_id>_dimensions`.
4. Dimension definitions (if `/define_dimensions` was used) reside in `business_dimensions_with_assignments` with ids like `<validator_atom_id>_<file_key>_dimensions`.

This flow ensures feature overview can retrieve the mapping for the selected project and atom id.
