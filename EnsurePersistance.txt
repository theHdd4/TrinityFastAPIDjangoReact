# Persisting Project State

The backend now records atom configurations and overall project state in three
different stores:

1. **Postgres** – `registry_projectstate` table stores `client_id`,
   `app_id`, `project_id` and the JSON state. The table is created on demand
   when saving for the first time. Upserts keep only the latest state for a
   project.
2. **Redis** – the active session state is cached under the key
   `projstate:{client}:{app}:{project}` with a TTL of one hour so reloads during a
   session are instant.
3. **MinIO snapshots** – every time state is saved, a copy is uploaded to
   `Client/App/Project/snapshots/<timestamp>.json`. When Redis and Postgres do
   not contain the data, the most recent snapshot is fetched.

The API exposes two endpoints:

- `POST /api/project-state/save` – body includes the three IDs and the state
  object.
- `GET /api/project-state/{client_id}/{app_id}/{project_id}` – returns the
  stored state, loading from Redis, Postgres or the latest snapshot as needed.

These mechanisms ensure that dropping atoms and saving will persist across
sessions even if the Redis cache expires or the database entry is removed.
