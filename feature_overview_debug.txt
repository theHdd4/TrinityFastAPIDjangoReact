During investigation of the feature overview atom failing to load the latest dataframe we traced the
backend calls. When the frontend requests `/feature-overview/column_summary` or `/sku_stats` the
following steps occur:

1. The route resolves the Arrow Flight path using `get_flight_path_for_csv`.
2. `download_dataframe` from `app.utils.arrow_client` attempts to retrieve the table from the
   Flight service. If the table is missing an error like `No table for <path>` is logged.
3. The client then falls back to MinIO using the arrow object name. When MinIO is unreachable the
   logs show repeated retries from `urllib3` and finally `fallback minio download failed`.
4. Because the dataframe was not returned, the UI later throws `TypeError: n.filter is not a
   function` when trying to use the response.

Running a simple script demonstrates these messages:
```
‚¨áÔ∏è downloading via flight: missing/table
‚ùå flight download failed for missing/table: No table for missing/table. Detail: Unavailable
ü™∂ inferred arrow object default_client/default_app/default_project/table
Retrying ... Failed to resolve 'minio'
‚ùå fallback minio download failed for missing/table: HTTPConnectionPool(...)
```

To avoid stale or unsupported formats the routes now only fetch Arrow files. If flight retrieval
fails the service loads the Arrow file from Redis or MinIO before processing.

Further testing revealed errors like:
```
‚ùå flight byte download failed for validator-.../file.arrow: No table for validator-.../file.arrow. Detail: Unavailable
```
The registry still pointed to a Flight path even when the table was missing, so the upload step was skipped because it thought the data already existed. The new
`arrow_dataset_exists` check verifies both MinIO and the Flight server and cleans up stale records if either resource is missing. This ensures the "Save dataframe"
operation actually uploads the table and registers the correct path.

After applying these checks and reuploading the dataset, flight downloads succeed and the UI no longer throws the "n.filter is not a function" error.

2025-07-04 investigation notes:
* The frontend crash occurred because `/feature-overview/column_summary` returned `{"detail": "File not found"}` when the Arrow Flight table was missing. The UI expected an array and failed at `setCards.filter`.
* Logs showed `download_dataframe()` raised `No table for validator-...` and the fallback MinIO lookup used an incorrect object name.
* Verified the save logic now uploads to `CLIENT/APP/PROJECT/<ts>_<name>.arrow` and registers `validator/<ts>_<name>.arrow` in the registry.
* Column summary and SKU stats fetch Arrow bytes first via Flight, then Redis or MinIO if needed; CSV files are never fetched from Flight.

2025-07-05 additional notes:
* Observed that after the Flight server restarted the first download fell back to MinIO but subsequent calls still failed because the table wasn't cached.
* The arrow_client download helpers now store the table back on the Flight server whenever MinIO fallback succeeds, preventing repeated `No table` errors.
