Project Rename Workflow – detailed operation guide

1. Initiating rename from the UI
   - In the projects page (`TrinityFrontend/src/pages/Projects.tsx`), `submitRename()` sends a `PATCH` request to `REGISTRY_API/projects/:id/` with the new name.
   - On success it updates local React state and browser `localStorage` (`current-project` and later refreshed `env`).

2. REST endpoint handling
   - Django's `ProjectViewSet` (`TrinityBackendDjango/apps/registry/views.py`) receives the `PATCH` request.
   - `serializer.save()` writes the new name to Postgres; `perform_update()` then refreshes `PROJECT_NAME` and `PROJECT_ID` in `os.environ` and persists them through `save_env_var()`.

3. Pre-save signal cascade
   - Before the model instance is saved, the `update_env_vars_on_rename` signal in `TrinityBackendDjango/apps/registry/signals.py` runs.
   - It compares the stored name with the incoming one and, when different:
     • Updates `RegistryEnvironment` so the project lookup table reflects the new `PROJECT_NAME`/`PROJECT_ID`.
     • Cleans up any stale registry rows still referencing the old name or ID.
     • Updates all `UserEnvironmentVariable` records tied to the project and invalidates cached environments via `invalidate_env()` and `set_current_env()` from `redis_store.env_cache`.
     • Synchronizes session state in MongoDB (`session_state` collection) and clears any Redis session caches for the old path.
     • Calls `rename_project_folder()` to move the MinIO prefix from `CLIENT_NAME/APP_NAME/old_project` to the new name, falling back to slug folders and ensuring a destination prefix exists.
     • Regenerates a unique slug for the project if needed.

4. After-save environment refresh
   - Once the signal completes and the project is saved, the `perform_update()` method returns the updated project data.
   - The frontend subsequently calls `GET /projects/:id/` to retrieve refreshed environment variables, which are cached in `localStorage` under `env` for other panels.

Storage touched during rename
   - Postgres tables: `Project`, `RegistryEnvironment`, `UserEnvironmentVariable`.
   - Redis: environment cache (`invalidate_env`/`set_current_env`) and session cache per project path.
   - MongoDB: `session_state` documents storing open sessions.
   - MinIO object storage: project folder prefix renamed or created.
   - Browser `localStorage`: `current-project` entry and cached environment variables.
