from .connection import POSTGRES_HOST, POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB, asyncpg

async def fetch_allowed_apps(user_id: int, client_id: int):
    """Fetch apps available to a user for a given client.

    Returns a list of dictionaries with keys ``app_id`` and ``app_name``.
    If ``asyncpg`` is unavailable the function returns an empty list.
    """
    if asyncpg is None:
        return []
    conn = await asyncpg.connect(
        host=POSTGRES_HOST,
        user=POSTGRES_USER,
        password=POSTGRES_PASSWORD,
        database=POSTGRES_DB,
    )
    try:
        rows = await conn.fetch(
            """
            SELECT a.id, a.name
            FROM roles_userroles ur
            JOIN registry_app a ON ur.app_id = a.id
            WHERE ur.user_id = $1 AND ur.client_id = $2
            ORDER BY a.name
            """,
            user_id,
            client_id,
        )
        return [{"app_id": r["id"], "app_name": r["name"]} for r in rows]
    finally:
        await conn.close()

async def register_project_session(data: dict) -> None:
    """Record selection into registry_project and registry_session tables.

    ``data`` must contain all required fields except ``last_activity_ts`` which
    is generated by the database (``NOW()``).  ``env_variables`` is expected to
    include ``identifiers``, ``measures`` and ``dimension_mapping`` entries so
    that both registry tables capture the latest project environment.
    """
    if asyncpg is None:
        return
    conn = await asyncpg.connect(
        host=POSTGRES_HOST,
        user=POSTGRES_USER,
        password=POSTGRES_PASSWORD,
        database=POSTGRES_DB,
    )
    try:
        env_vars = getattr(data["env_variables"], "dict", lambda: data["env_variables"])()
        await conn.execute(
            """
            CREATE TABLE IF NOT EXISTS registry_project (
                project_id BIGINT PRIMARY KEY,
                user_id BIGINT,
                username TEXT,
                role TEXT,
                client_id BIGINT,
                client_name TEXT,
                app_id BIGINT,
                app_name TEXT,
                project_name TEXT,
                session_id TEXT,
                active_mode TEXT,
                minio_prefix TEXT,
                env_variables JSONB,
                tenant_schema_name TEXT,
                last_activity_ts TIMESTAMP
            )
            """
        )
        await conn.execute(
            """
            CREATE TABLE IF NOT EXISTS registry_session (
                id BIGSERIAL PRIMARY KEY,
                project_id BIGINT,
                user_id BIGINT,
                username TEXT,
                role TEXT,
                client_id BIGINT,
                client_name TEXT,
                app_id BIGINT,
                app_name TEXT,
                project_name TEXT,
                session_id TEXT,
                active_mode TEXT,
                minio_prefix TEXT,
                env_variables JSONB,
                tenant_schema_name TEXT,
                last_activity_ts TIMESTAMP
            )
            """
        )
        await conn.execute(
            """
            INSERT INTO registry_project (
                project_id, user_id, username, role, client_id, client_name,
                app_id, app_name, project_name, session_id, active_mode,
                minio_prefix, env_variables, tenant_schema_name, last_activity_ts
            ) VALUES (
                $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,NOW()
            )
            ON CONFLICT (project_id) DO UPDATE SET
                user_id=EXCLUDED.user_id,
                username=EXCLUDED.username,
                role=EXCLUDED.role,
                client_id=EXCLUDED.client_id,
                client_name=EXCLUDED.client_name,
                app_id=EXCLUDED.app_id,
                app_name=EXCLUDED.app_name,
                project_name=EXCLUDED.project_name,
                session_id=EXCLUDED.session_id,
                active_mode=EXCLUDED.active_mode,
                minio_prefix=EXCLUDED.minio_prefix,
                env_variables=EXCLUDED.env_variables,
                tenant_schema_name=EXCLUDED.tenant_schema_name,
                last_activity_ts=NOW()
            """,
            data["project_id"],
            data["user_id"],
            data["username"],
            data["role"],
            data["client_id"],
            data["client_name"],
            data["app_id"],
            data["app_name"],
            data["project_name"],
            data["session_id"],
            data["active_mode"],
            data["minio_prefix"],
            asyncpg.Json(env_vars),
            data["tenant_schema_name"],
        )
        await conn.execute(
            """
            INSERT INTO registry_session (
                project_id, user_id, username, role, client_id, client_name,
                app_id, app_name, project_name, session_id, active_mode,
                minio_prefix, env_variables, tenant_schema_name, last_activity_ts
            ) VALUES (
                $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,NOW()
            )
            """,
            data["project_id"],
            data["user_id"],
            data["username"],
            data["role"],
            data["client_id"],
            data["client_name"],
            data["app_id"],
            data["app_name"],
            data["project_name"],
            data["session_id"],
            data["active_mode"],
            data["minio_prefix"],
            asyncpg.Json(env_vars),
            data["tenant_schema_name"],
        )
    finally:
        await conn.close()
