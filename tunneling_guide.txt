# Cloudflare Tunnel Setup for Trinity Platform

This guide explains how to expose the Dockerized Trinity application using a single Cloudflare Tunnel so the public accesses **trinity.quantmatrixai.com** while the backend services remain private. All traffic is routed to Traefik inside the Docker network. The examples assume your host IP is stored in the `HOST_IP` environment variable.

## 1. Install cloudflared

1. [Create a free Cloudflare account](https://dash.cloudflare.com) and add the `quantmatrixai.com` domain.
2. On the host machine install the Cloudflare tunnel client:
   ```bash
   curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb -o cloudflared.deb
   sudo dpkg -i cloudflared.deb
   ```
   Alternatively use `brew install cloudflared` or download the binary from the Cloudflare website.
3. Authenticate:
   ```bash
   cloudflared login
   ```
   A browser window opens where you select the Cloudflare account and domain. This generates a credentials file under `~/.cloudflared`.

## 2. Create a named tunnel

```bash
cloudflared tunnel create trinity-frontend
```

Copy the generated tunnel UUID. Cloudflare also saves a credentials JSON for the tunnel and updates your `cert.pem`. Copy both files into `cloudflared/tunnelCreds` so Docker can mount them. Ensure they are readable only by you:

```bash
cp ~/.cloudflared/e0a883c4-bc43-4742-b47a-96ef902e6bb3.json \
  cloudflared/tunnelCreds/e0a883c4-bc43-4742-b47a-96ef902e6bb3.json
cp ~/.cloudflared/cert.pem cloudflared/tunnelCreds/cert.pem
chmod 600 cloudflared/tunnelCreds/e0a883c4-bc43-4742-b47a-96ef902e6bb3.json \
  cloudflared/tunnelCreds/cert.pem
```

## 3. Configure DNS routing

Set up a DNS record in Cloudflare for the frontend:
```bash
cloudflared tunnel route dns trinity-frontend trinity.quantmatrixai.com
```
Ensure the record is **Proxied**. You can also run the command from inside the container:
```bash
docker compose exec cloudflared cloudflared tunnel route dns trinity-frontend trinity.quantmatrixai.com
```

## 4. Cloudflared configuration

Create `cloudflared/tunnelCreds/config.yml`:
```yaml
tunnel: e0a883c4-bc43-4742-b47a-96ef902e6bb3
credentials-file: /etc/cloudflared/e0a883c4-bc43-4742-b47a-96ef902e6bb3.json

ingress:
  - hostname: trinity.quantmatrixai.com
    service: http://traefik:80
  - service: http_status:404
```
The values above use the real tunnel ID. Copy the generated credentials file into `cloudflared/tunnelCreds/e0a883c4-bc43-4742-b47a-96ef902e6bb3.json` (an example `credentials.json.example` is provided). The Docker container mounts this path so Cloudflared can authenticate.

## 5. Docker Compose service

The `docker-compose.yml` in the repository root already exposes all containers on the `trinity-net` network. Add the following service (already included in the repository). The volume path references the `cloudflared/tunnelCreds` folder in the repository root. Use a read-only mount so the container cannot modify the files:
```yaml
  cloudflared:
    image: cloudflare/cloudflared:latest
    command: tunnel run
    volumes:
      - ../cloudflared/tunnelCreds:/etc/cloudflared:ro
  traefik:
    image: traefik:v2.11
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - frontend
    networks:
      - trinity-net
```
The `cloudflared` container runs the tunnel using the configuration from `cloudflared/tunnelCreds/config.yml`.
Traefik watches the other containers via the mounted Docker socket.
If running Docker on Windows, use an absolute path such as:
`C:/TrinityFastAPIDjangoReact/cloudflared/tunnelCreds:/etc/cloudflared:ro`.

## 6. Frontend environment

Update `TrinityFrontend/.env` so API calls go to the Django backend through the
tunnel:

```bash
cp TrinityFrontend/.env.example TrinityFrontend/.env
echo "VITE_BACKEND_ORIGIN=https://trinity.quantmatrixai.com" >> TrinityFrontend/.env
```
This ensures `fetch()` requests like `/admin/api/accounts/login/` hit the correct host
instead of the frontend container.
After editing `.env`, rebuild the frontend image so the environment variable is
embedded in the compiled bundle:

```bash
docker compose build frontend
```
## 7. Running everything

1. Build and start the stack:
   ```bash
   scripts/start_backend.sh
   ```
2. Cloudflared establishes the tunnel and routes all requests for `trinity.quantmatrixai.com` to Traefik.
3. Visit `https://trinity.quantmatrixai.com` for the frontend. Use the `/api/` and `/admin/` paths for the backend services. Traefik strips `/admin` before forwarding to Django so the REST API still lives under `/api/` internally.

The services remain reachable on the local network as before, while Cloudflare Tunnel provides secure public access.

## 8. Troubleshooting

If visiting `https://trinity.quantmatrixai.com` or the backend subdomains returns a Cloudflare **530** error, the tunnel is not connected to the
origin. Common causes are missing DNS records or incorrect IDs in `cloudflared/tunnelCreds/config.yml`.

1. Verify your DNS entries in Cloudflare are **Proxied** (orange cloud) and point to the tunnel using
   `cloudflared tunnel route dns trinity-frontend <hostname>`.
2. Check that `cloudflared/tunnelCreds/config.yml` contains your actual tunnel UUID and that
   `cloudflared/tunnelCreds/e0a883c4-bc43-4742-b47a-96ef902e6bb3.json` matches the same ID.
3. Ensure the `cloudflared` container is running by inspecting the output of `docker compose logs cloudflared`.
   It should report "Connected" after startup.
4. If requests succeed when using the backend IP but return **404** on the public
   domain, the Django tenant middleware may not recognize the hostname. Add the
   domain, your host IP **and `localhost`** to `ADDITIONAL_DOMAINS` in
   `TrinityBackendDjango/.env` and rerun `python create_tenant.py` so the aliases
   are created.

Cloudflare handles HTTPS automatically, so the services in `config.yml` use plain `http://` URLs. Once the tunnel is active the
external domain will load over HTTPS without additional changes.

## 9. Switching the frontend domain

Follow these steps if you need to rename the frontend tunnel endpoint to
`trinity.quantmatrixai.com`:

1. Purchase or configure the `quantmatrixai.com` domain in Cloudflare if you do
   not already control it.
2. Under *DNS* add a **CNAME** record for `trinity` pointing to your Cloudflare
   tunnel. Enable the orange proxy icon.
3. Edit `cloudflared/tunnelCreds/config.yml` and replace the original `quantmatrixai.com`
   hostname with `trinity.quantmatrixai.com` for the frontend service.
4. Update CORS settings by editing `TrinityBackendDjango/.env`,
   `.env.example` and `config/settings.py` to include
   `https://trinity.quantmatrixai.com`. Also set `FASTAPI_CORS_ORIGINS` to the
   same value so the FastAPI service accepts requests from the tunnel.
5. Rebuild the containers so the new configuration is applied:

   ```bash
   docker compose build frontend web cloudflared
   docker compose up -d
   ```

When Cloudflared reports **Connected** you can access the React application at
`https://trinity.quantmatrixai.com` while API calls continue to go to the
`admin` and `api` subdomains.
