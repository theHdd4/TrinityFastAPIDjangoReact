# Cloudflare Tunnel Setup for Trinity Platform

This guide explains how to expose the Dockerized Trinity application using Cloudflare Tunnel so the services are reachable at **quantmatrixai.com** and its subdomains. The examples assume your host IP is `10.2.1.65`.

## 1. Install cloudflared

1. [Create a free Cloudflare account](https://dash.cloudflare.com) and add the `quantmatrixai.com` domain.
2. On the host machine install the Cloudflare tunnel client:
   ```bash
   curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb -o cloudflared.deb
   sudo dpkg -i cloudflared.deb
   ```
   Alternatively use `brew install cloudflared` or download the binary from the Cloudflare website.
3. Authenticate:
   ```bash
   cloudflared login
   ```
   A browser window opens where you select the Cloudflare account and domain. This generates a credentials file under `~/.cloudflared`.

## 2. Create a named tunnel

```bash
cloudflared tunnel create trinity-tunnel
```

Copy the generated tunnel UUID. Cloudflare also saves a credentials JSON for the tunnel and updates your `cert.pem`. Copy both files into `tunnelCreds` so Docker can mount them. Ensure they are readable only by you:

```bash
cp ~/.cloudflared/<UUID>.json tunnelCreds/credentials.json
cp ~/.cloudflared/cert.pem tunnelCreds/cert.pem
chmod 600 tunnelCreds/credentials.json tunnelCreds/cert.pem
```

## 3. Configure DNS routing

Set up DNS records in Cloudflare to point to the tunnel:
- `quantmatrixai.com` -> tunnel
- `api.quantmatrixai.com` -> tunnel
- `admin.quantmatrixai.com` -> tunnel

These can be created automatically using:
```bash
cloudflared tunnel route dns trinity-tunnel quantmatrixai.com
cloudflared tunnel route dns trinity-tunnel api.quantmatrixai.com
cloudflared tunnel route dns trinity-tunnel admin.quantmatrixai.com
```

## 4. Cloudflared configuration

Create `tunnelCreds/config.yml`:
```yaml
tunnel: YOUR_TUNNEL_UUID
credentials-file: /etc/cloudflared/credentials.json

ingress:
  - hostname: quantmatrixai.com
    service: http://frontend:80
  - hostname: api.quantmatrixai.com
    service: http://fastapi:8001
  - hostname: admin.quantmatrixai.com
    service: http://web:8000
  - service: http_status:404
```
Replace `YOUR_TUNNEL_UUID` with the ID from step 2. Copy the generated credentials file into `tunnelCreds/credentials.json` (an example `credentials.json.example` is provided). The Docker container mounts this path so Cloudflared can authenticate.

## 5. Docker Compose service

The `docker-compose.yml` inside `TrinityBackendDjango` already exposes all containers on the `trinity-net` network. Add the following service (already included in the repository). The volume path references the `tunnelCreds` folder in the repository root (one directory above this compose file). Use a read-only mount so the container cannot modify the files:
```yaml
  cloudflared:
    image: cloudflare/cloudflared:latest
    command: tunnel run
    volumes:
      - ../tunnelCreds:/etc/cloudflared:ro
    depends_on:
      - frontend
    networks:
      - trinity-net
```
This container runs the tunnel using the configuration from `tunnelCreds/config.yml`.
If running Docker on Windows, use an absolute path such as:
`C:/TrinityFastAPIDjangoReact/tunnelCreds:/etc/cloudflared:ro`.

## 6. Running everything

1. Build and start the stack:
   ```bash
   docker-compose up --build
   ```
2. Cloudflared establishes the tunnel and routes requests for the configured hostnames to the correct containers.
3. Visit `https://quantmatrixai.com` for the frontend, `https://api.quantmatrixai.com` for FastAPI and `https://admin.quantmatrixai.com` for Django.

The services remain reachable on the local network as before, while Cloudflare Tunnel provides secure public access.

## 7. Troubleshooting

If visiting `https://quantmatrixai.com` or its subdomains returns a Cloudflare **530** error, the tunnel is not connected to the
origin. Common causes are missing DNS records or incorrect IDs in `tunnelCreds/config.yml`.

1. Verify your DNS entries in Cloudflare are **Proxied** (orange cloud) and point to the tunnel using
   `cloudflared tunnel route dns trinity-tunnel <hostname>`.
2. Check that `tunnelCreds/config.yml` contains your actual tunnel UUID and that
   `tunnelCreds/credentials.json` matches the same ID.
3. Ensure the `cloudflared` container is running by inspecting the output of `docker-compose logs cloudflared`.
   It should report "Connected" after startup.

Cloudflare handles HTTPS automatically, so the services in `config.yml` use plain `http://` URLs. Once the tunnel is active the
external domain will load over HTTPS without additional changes.
