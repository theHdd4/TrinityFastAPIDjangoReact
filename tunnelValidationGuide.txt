# Tunnel Validation Guide

Follow these steps to confirm that the services are reachable via their Cloudflare tunnels.

## 1. Start the stack

Run the Docker compose services from the `TrinityBackendDjango` directory:

```bash
cd TrinityBackendDjango
docker-compose up --build
```

Wait until the `cloudflared` container reports `Connected`.
Docker Compose also starts shortâ€‘lived `check-*` services that
execute the helper scripts automatically. They print **SUCCESS** or **FAILURE**
in the logs based on the response from each public URL.

Traefik handles path based routing for the tunnel. Requests to
`https://trinity.quantmatrixai.com/admin/` map to the Django container
`web:8000` while `https://trinity.quantmatrixai.com/api/` is forwarded to
the FastAPI service `fastapi:8001`. Traefik removes the `/admin` prefix
before forwarding the request so Django handles it under `/api/` or `/admin/` as
defined in `config/urls.py`. The root path `/` serves the React frontend.
Ensure these mappings are configured in
`TrinityBackendDjango/docker-compose.yml` before validating the tunnel.

The effective routing looks like this:

```
https://trinity.quantmatrixai.com/       -> frontend container
https://trinity.quantmatrixai.com/admin/ -> Django (http://web:8000)
https://trinity.quantmatrixai.com/api/   -> FastAPI (http://fastapi:8001)
```

## 2. Check the tunnel

Use the validation helper located in the `scripts` folder. It sends a request to the admin login page and prints the HTTP status and server header.

```bash
python scripts/check_django_tunnel.py
```

To check a different host, pass the URL as an argument or set `BACKEND_URL`:

```bash
python scripts/check_django_tunnel.py https://trinity.quantmatrixai.com/admin/login/
```

A healthy tunnel prints output similar to:

```
[INFO] Checking https://trinity.quantmatrixai.com/admin/login/
[INFO] Status 200
[INFO] Server cloudflare
[INFO] Tunnel appears healthy
```

## 3. Troubleshooting

If the script reports an error:

1. Inspect the tunnel logs:

   ```bash
   docker compose logs cloudflared
   ```

   Look for messages like `Connected` or any errors indicating authentication or DNS issues.

2. Ensure the `cloudflared` container is running:

   ```bash
   docker compose ps cloudflared
   ```

3. Verify the Django container is healthy:

   ```bash
   docker-compose logs web
   ```

4. Confirm the DNS records in Cloudflare point to the correct tunnel and are set to **Proxied**.
5. Double-check that the credential JSON files in `cloudflared/tunnelCreds/` match the UUID listed in each config file. If the file name or ID is wrong the tunnel cannot authenticate.
6. Restart a tunnel if needed:

   ```bash
   docker compose restart cloudflared
   ```

Use these logs to identify whether the request is reaching the tunnel or failing earlier. Once the script shows a 200 status, the frontend should be able to access the backend through `https://trinity.quantmatrixai.com/admin/`.
