import React, { useState, useMemo, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

import { Trash2 } from 'lucide-react';
import { ScenarioPlannerSettings } from '@/components/LaboratoryMode/store/laboratoryStore';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

interface ScenarioPlannerCanvasProps {
  atomId: string;
  settings: ScenarioPlannerSettings;
  onSettingsChange: (newSettings: Partial<ScenarioPlannerSettings>) => void;
}

export const ScenarioPlannerCanvas: React.FC<ScenarioPlannerCanvasProps> = ({ 
  atomId, 
  settings, 
  onSettingsChange 
}) => {
  const [combinationInputs, setCombinationInputs] = useState<{[key: string]: {[featureId: string]: {input: string; change: string}}}>({}); 

  // Debug: Log when data changes
  useEffect(() => {
    // Data received successfully
  }, [settings]);

  // Use combinations directly from settings (generated by Settings component)
  const combinations = settings.combinations || [];

  // Debug: Monitor combinations changes
  useEffect(() => {
    // Combinations updated successfully
  }, [combinations]);

  // Clear inputs when combinations change
  useEffect(() => {
    if (combinations.length === 0) {
      setCombinationInputs({});
    }
  }, [combinations]);

  const handleInputChange = (combinationId: string, featureId: string, field: 'input' | 'change', value: string) => {
    setCombinationInputs(prev => ({
      ...prev,
      [combinationId]: {
        ...prev[combinationId],
        [featureId]: {
          ...prev[combinationId]?.[featureId],
          [field]: value
        }
      }
    }));
  };

  const handleDeleteCombination = (combinationId: string) => {
    // Find the combination to be deleted
    const combinationToDelete = combinations.find(c => c.id === combinationId);
    
    if (combinationToDelete) {
      // Remove the combination from the data
      const updatedCombinations = combinations.filter(c => c.id !== combinationId);
      
      // Collect all identifier values still needed by remaining combinations
      const stillNeededValues = new Set<string>();
      updatedCombinations.forEach(combination => {
        combination.identifiers.forEach(identifierString => {
          stillNeededValues.add(identifierString);
        });
      });
      
      // Update the identifiers to uncheck only values that are no longer needed
      const updatedIdentifiers = settings.identifiers.map(identifier => {
        return {
          ...identifier,
          values: identifier.values.map(value => {
            // Create the full identifier string (e.g., "identifier-1-1a")
            const fullIdentifierString = `${identifier.id}-${value.id}`;
            
            // Check if this value is still needed by any remaining combination
            const isStillNeeded = stillNeededValues.has(fullIdentifierString);
            
            // Only uncheck if it was checked before but is no longer needed
            return {
              ...value,
              checked: isStillNeeded ? value.checked : false
            };
          })
        };
      });
      
      // Update both combinations and identifiers together
      onSettingsChange({ 
        combinations: updatedCombinations,
        identifiers: updatedIdentifiers
      });
      
      // Also clear any inputs for this combination
      setCombinationInputs(prev => {
        const newInputs = { ...prev };
        delete newInputs[combinationId];
        return newInputs;
      });
    }
  };

  const selectedFeatures = settings.features.filter(f => f.selected);
  const selectedOutputs = settings.outputs.filter(o => o.selected);

  // Debug: Monitor features changes
  useEffect(() => {
    console.log('Features changed:', {
      allFeatures: settings.features.map(f => ({ id: f.id, name: f.name, selected: f.selected })),
      selectedFeatures: selectedFeatures.map(f => ({ id: f.id, name: f.name, selected: f.selected }))
    });
  }, [settings.features, selectedFeatures]);

  // Mock chart data
  const chartData = [
    { name: 'Jan', value: 400 },
    { name: 'Feb', value: 300 },
    { name: 'Mar', value: 500 },
    { name: 'Apr', value: 280 },
  ];

  return (
    <div className="flex h-full bg-background">
      {/* Main Canvas - Full Width */}
      <div className="flex-1 flex flex-col p-4 space-y-4">
        {/* Scenario Selection */}
        <Card className="p-4">
          <h2 className="text-lg font-semibold text-foreground mb-3">Scenario Planner</h2>
          <Tabs value={settings.selectedScenario} onValueChange={(value) => onSettingsChange({ selectedScenario: value })}>
            <TabsList className="grid grid-cols-5 w-full">
              <TabsTrigger value="base-case" className="text-sm">Base Case</TabsTrigger>
              <TabsTrigger value="scenario-2" className="text-sm">Scenario 2</TabsTrigger>
              <TabsTrigger value="scenario-3" className="text-sm">Scenario 3</TabsTrigger>
              <TabsTrigger value="scenario-4" className="text-sm">Scenario 4</TabsTrigger>
            </TabsList>
          </Tabs>
        </Card>

        {/* Header */}
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold text-gray-900">Input Grid</h3>
        </div>

        {/* Main Editor Table */}
        <Card className="p-4">
          <div className="border rounded-lg overflow-hidden">
            <div className="overflow-auto" style={{ height: '300px', maxHeight: '300px' }}>
              <table key={combinations.length + '_' + combinations.map(c => c.id).join('_')} className="min-w-[800px] w-full">
                <thead className="sticky top-0 bg-background z-10">
                  <tr className="border-b">
                    <th className="w-48 p-2 text-left font-medium text-sm text-muted-foreground">Combination</th>
                    {selectedFeatures.map(feature => (
                      <th key={feature.id} className="w-48 p-2 text-center font-medium text-sm text-muted-foreground">
                        <div className="mb-1">{feature.name}</div>
                        <div className="grid grid-cols-3 gap-1 text-xs">
                          <span>Abs</span>
                          <span>Pct</span>
                          <span>{settings.referenceMethod === 'median' ? 'Median' : 'Mean'}</span>
                        </div>
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  {combinations.length === 0 ? (
                    <tr>
                      <td colSpan={selectedFeatures.length + 1} className="text-center text-muted-foreground py-8">
                        Select identifier values in the settings panel to create combinations
                      </td>
                    </tr>
                  ) : (
                    combinations.map((combination, index) => {
                      return (
                        <tr key={combination.id} className="border-b border-border/50 hover:bg-muted/50">
                          <td className="w-48 p-2 text-sm font-medium text-foreground">
                            <div className="flex items-center justify-between group">
                              <span>
                                {Array.isArray(combination.identifiers) 
                                  ? combination.identifiers.map((identifierId, idx) => {
                                      // Extract the identifier and value names for display
                                      const [identifierIdPart, valueIdPart] = identifierId.split('-');
                                      const identifier = settings.identifiers.find(id => id.id === identifierIdPart);
                                      const value = identifier?.values.find(v => v.id === valueIdPart);
                                      return value ? value.name : identifierId;
                                    }).join(' Ã— ')
                                  : 'Invalid combination'
                                }
                              </span>
                              <button
                                onClick={() => handleDeleteCombination(combination.id)}
                                className="opacity-0 group-hover:opacity-100 transition-opacity p-1 hover:bg-red-100 rounded text-red-500 hover:text-red-700"
                                title="Delete combination"
                              >
                                <Trash2 className="w-4 w-4" />
                              </button>
                            </div>
                          </td>
                          {selectedFeatures.map(feature => {
                            return (
                              <td key={feature.id} className="w-48 p-2">
                                <div className="grid grid-cols-3 gap-1">
                                  <Input 
                                    type="number" 
                                    className="h-8 text-xs"
                                    value={combinationInputs[combination.id]?.[feature.id]?.input || ''}
                                    onChange={(e) => handleInputChange(combination.id, feature.id, 'input', e.target.value)}
                                    placeholder="Abs"
                                  />
                                  <Input 
                                    type="number" 
                                    className="h-8 text-xs"
                                    value={combinationInputs[combination.id]?.[feature.id]?.change || ''}
                                    onChange={(e) => handleInputChange(combination.id, feature.id, 'change', e.target.value)}
                                    placeholder="Pct(%)"
                                  />
                                  <div className="h-8 px-2 bg-muted rounded text-xs flex items-center justify-center text-muted-foreground">
                                    {combination.values && combination.values[feature.id] ? 
                                      combination.values[feature.id].reference || 0 : 'N/A'}
                                  </div>
                                </div>
                              </td>
                            );
                          })}
                        </tr>
                      );
                    })
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </Card>

        {/* Results Section */}
        <Card className="flex-1 p-4">
          <div className="mb-4">
            <div className="flex items-center justify-between mb-3">
              <h3 className="text-lg font-semibold text-foreground">Results</h3>
              <Button onClick={() => {}} className="bg-primary hover:bg-primary/90">
                Calculate Results
              </Button>
            </div>
            
            <Tabs defaultValue="scenario-1" className="mb-4">
              <TabsList className="grid grid-cols-4 w-fit mb-4">
                <TabsTrigger value="scenario-1" className="text-sm">Scenario 1</TabsTrigger>
                <TabsTrigger value="scenario-2" className="text-sm">Scenario 2</TabsTrigger>
                <TabsTrigger value="scenario-3" className="text-sm">Scenario 3</TabsTrigger>
                <TabsTrigger value="scenario-4" className="text-sm">Scenario 4</TabsTrigger>
              </TabsList>
            </Tabs>

            <Tabs defaultValue="view-1">
              <TabsList className="grid grid-cols-3 w-fit">
                <TabsTrigger value="view-1" className="text-sm">View 1</TabsTrigger>
                <TabsTrigger value="view-2" className="text-sm">View 2</TabsTrigger>
                <TabsTrigger value="view-3" className="text-sm">View 3</TabsTrigger>
              </TabsList>
              
              <TabsContent value="view-1" className="mt-4">
                <div className="grid grid-cols-2 gap-4">
                  {selectedOutputs.slice(0, 4).map((output, index) => (
                    <div key={output.id} className="bg-card border rounded-lg p-4">
                      <h4 className="text-sm font-medium mb-2">{output.name}</h4>
                      <ResponsiveContainer width="100%" height={120}>
                        <BarChart data={chartData}>
                          <CartesianGrid strokeDasharray="3 3" stroke="hsl(var(--border))" />
                          <XAxis dataKey="name" tick={{ fontSize: 12 }} />
                          <YAxis tick={{ fontSize: 12 }} />
                          <Tooltip />
                          <Bar dataKey="value" fill="hsl(var(--primary))" />
                        </BarChart>
                      </ResponsiveContainer>
                    </div>
                  ))}
                </div>
              </TabsContent>
              
              <TabsContent value="view-2" className="mt-4">
                <div className="text-center text-muted-foreground py-8">
                  View 2 content - Configure in settings panel
                </div>
              </TabsContent>
              
              <TabsContent value="view-3" className="mt-4">
                <div className="text-center text-muted-foreground py-8">
                  View 3 content - Configure in settings panel
                </div>
              </TabsContent>
            </Tabs>
          </div>
        </Card>
      </div>
    </div>
  );
};