# Cloudflare Tunnel Setup

The services are exposed through a Cloudflare tunnel that forwards requests to
Traefik. Traefik then routes traffic to the React frontend, Django admin and
FastAPI backend. Follow the steps below on your host machine.

## 1. Install `cloudflared`
1. Create or sign in to your Cloudflare account and add the `quantmatrixai.com` domain.
2. Install the Cloudflare Tunnel client:
   ```bash
   curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb -o cloudflared.deb
   sudo dpkg -i cloudflared.deb
   cloudflared login
   ```
   Authentication places credentials under `~/.cloudflared`.

## 2. Create a tunnel
Create a named tunnel and record the generated UUID:
```bash
cloudflared tunnel create trinity-tunnel
```
Copy the `<UUID>.json` file and `cert.pem` into `cloudflared/tunnelCreds/`. The
`config.yml` file references this UUID and defines the ingress rules for the
frontend, admin and API subdomains.

## 3. Configure DNS
Create DNS records for the frontend, admin and API domains and associate them
with the tunnel:
```bash
cloudflared tunnel route dns trinity-tunnel trinity.quantmatrixai.com
cloudflared tunnel route dns trinity-tunnel admin.quantmatrixai.com
cloudflared tunnel route dns trinity-tunnel api.quantmatrixai.com
```
Ensure each record is **Proxied** (orange cloud) in the Cloudflare dashboard.

## 4. Docker Compose services
The tunnel containers are defined in `cloudflared/docker-compose.yml` so they
can run independently from the backend stack. Start the backend services first
so the shared `trinity-net` network exists:
```bash
scripts/start_backend.sh
```
Then launch the tunnels:
```bash
cd ../cloudflared
docker compose up -d
```
Each tunnel container should report `Connected` shortly after startup.

## 5. Validate connectivity
Shortâ€‘lived `check-*` containers automatically run a script verifying that each public URL responds:
```bash
docker compose logs check-admin
docker compose logs check-frontend
docker compose logs check-api
```
You can run the helpers manually from the repository root:
```bash
python scripts/check_django_tunnel.py
python scripts/check_frontend_tunnel.py
python scripts/check_fastapi_tunnel.py
```
All commands should print `SUCCESS` when the tunnels and services are working.

## 6. Troubleshooting

If a script prints a **530** status the tunnel is not connected to your
containers. Common causes are:

1. The credentials JSON file does not match the `tunnel:` ID in the config
   (`config_admin.yml`, `config_frontend.yml`, or `config_api.yml`). Ensure the
   file name is `<UUID>.json` and that the same UUID appears in the `tunnel:`
   field of the config.
2. DNS records may be missing or not proxied. Verify the `cloudflared tunnel`
   `route dns` commands completed successfully and that the orange cloud is
   enabled in the Cloudflare dashboard.
3. The origin containers might not be running. Check the logs with
   `docker compose logs web fastapi frontend cloudflared` and confirm the
   tunnel container shows `Connected`.

After correcting any issues restart the tunnel service:

```bash
docker compose restart cloudflared
```

Once the logs show **Connected** re-run the check scripts.

