DataFrame Operations API Mapping
================================

Each dataframe action in the DataFrame Operations atom calls a REST endpoint from `services/dataframeOperationsApi.ts`. The following table describes which UI action triggers which API:

- **Load Dataframe** – `POST /load`
  - Triggered when a user uploads a CSV/Excel file.
- **Edit Cell** – `POST /edit_cell`
  - Triggered after a cell edit is committed.
- **Insert Row** – `POST /insert_row`
  - Triggered from the row context menu or Add Row control.
- **Delete Row** – `POST /delete_row`
  - Triggered from the row context menu.
- **Duplicate Row** – `POST /duplicate_row`
  - Triggered from the row context menu.
- **Insert Column** – `POST /insert_column`
  - Triggered from the column header menu.
- **Delete Column** – `POST /delete_column`
  - Triggered from the column header menu.
- **Duplicate Column** – `POST /duplicate_column`
  - Triggered from the column header menu.
- **Move Column** – `POST /move_column`
  - Triggered by dragging and dropping column headers.
- **Retype Column** – `POST /retype_column`
  - Triggered from the column type selector.
- **Rename Column** – `POST /rename_column`
  - Triggered by editing a header label.
- **Sort Dataframe** – `POST /sort`
  - Triggered by sort controls on column headers.
- **Filter Rows** – `POST /filter_rows`
  - Triggered by filter controls.

Verifying API Usage
-------------------
1. Open browser developer tools and monitor the **Network** tab.
2. Perform a dataframe operation from the UI and observe the outgoing request to the corresponding `/dataframe-operations` endpoint.
3. Block or disable network access; the operation should fail, confirming it depends on the API.
4. Review server logs to verify the backend received the request.

These steps ensure dataframe operations are executed through the API layer rather than directly in the browser.
