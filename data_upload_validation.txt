The Data Upload & Validate atom connects the React frontend under
`TrinityFrontend/src/components/AtomList/atoms/data-upload-validate`
with the FastAPI service in
`TrinityBackendFastAPI/app/features/data_upload_validate`.

User flow
---------
1. In the atom property panel the user uploads master/template files.
   The component posts the files to `POST /api/data-upload-validate/create_new`
   which returns the generated validator id. Column types are fetched from
   `GET /api/data-upload-validate/get_validator_config/<id>`.
   Uploaded file names are preserved as the `file_keys` so the required files
   list displays the original names instead of numbered placeholders.
2. After selecting a master file the user can modify data types, value ranges
   and frequency requirements. Clicking **Save Configuration** sends
   `POST /api/data-upload-validate/update_column_types` followed by
   `POST /api/data-upload-validate/configure_validation_config` to persist the
   validation rules.
3. Required master files appear in the UI. When data files are uploaded the
   **Validate Files** action posts the files to `POST /api/data-upload-validate/validate`.
   Each file response is displayed as success or failure.
4. Whenever the atom is reopened, the properties panel fetches the saved
   configuration using `GET /api/data-upload-validate/get_validator_config/<id>`
   so validations and column classifications persist. These settings are stored
   in MongoDB under the `validator_atoms` and `validation_config` collections.

Endpoints
---------
- `POST /api/data-upload-validate/create_new` – create validator from master files.
- `GET  /api/data-upload-validate/get_validator_config/{validator_id}` – return
  stored schemas, column types and saved metadata.
- `POST /api/data-upload-validate/update_column_types` – update detected column
  types for a file key.
- `POST /api/data-upload-validate/configure_validation_config` – store custom
  conditions and date frequency checks.
- `POST /api/data-upload-validate/validate` – validate uploaded files using the
  configured rules.
- `DELETE /api/data-upload-validate/delete_validator_atom/{validator_id}` –
  remove a validator and all associated metadata.

The frontend uses `VALIDATE_API` from `src/lib/api.ts` to resolve the base URL
for these endpoints.

Identifier and measure selection
-------------------------------
The Dimension tab in the properties panel lists categorical columns as
**Identifiers** and numerical columns as **Measures**. Users may select multiple
columns in each list. When **Save Configuration** is pressed the selections are
sent to `POST /api/data-upload-validate/classify_columns` together with the
validator id and file key. The backend stores the result in MongoDB so that a
subsequent call to `GET /api/data-upload-validate/get_validator_config/<id>`
returns the saved identifiers and measures. No identifiers or measures are
selected by default.

Column selection for validations
-------------------------------
When a master file is chosen, the frontend requests the validator configuration
and extracts the detected `column_types` for that file. Numerical columns
(`integer` or `numeric`) populate the dropdown for range checks while `date`
columns are used for periodicity selection.  This logic runs on the client using
the data returned by `/get_validator_config/{validator_id}`. Implementing a
separate API to filter columns was considered but would simply duplicate the
existing information and add an extra network request. Keeping the filtering in
the frontend avoids additional backend complexity and works as long as the
column types are already part of the configuration response.

Data type defaults
------------------
The Data Types tab now lists four options for each column: **Number**, **String**,
**Date**, and **Not defined**. Internally "Not defined" is represented by the value
`not_defined` so `<Select.Item />` components always have a non-empty value prop.
When a master file is first uploaded every column defaults to **Not defined**.
Only columns with a chosen data type are saved back to MongoDB and included as
datatype validations. Leaving a column as *Not defined* removes any existing
datatype validation for that column.
Likewise range or periodicity rules are stored only for rows where a column and
value have been specified.

Persistence
-----------
Validator settings (required file names, column types, validations and column
classifications) are saved in MongoDB. The properties panel reads this
information from `/get_validator_config/{validator_id}` whenever the atom is
rendered so the configuration is restored even after the UI collapses or the
page reloads.

Validation units
----------------
Whenever column types or value rules are saved, the backend flattens them into
"validation units" stored in the `validation_units` MongoDB collection. Each
unit represents a single check:

* **datatype** – `{column, validation_type: 'datatype', expected}`
* **range** – `{column, validation_type: 'range', min, max}`
* **periodicity** – `{column, validation_type: 'periodicity', periodicity}`

The `/get_validator_config` endpoint now returns these units under
`validations`. The frontend converts them back into range and periodicity lists
so existing UI elements continue to work.

Atom UI Details
---------------
* Required file entries now include a rename button and an info button. Clicking
  the pencil icon lets you rename the display name for a file. The info button
  reveals all configured validations in a horizontal scroll list showing column
  types, range checks and periodicity rules.
* Each uploaded file row has a dropdown listing the required files. This mapping
  determines which template to use when the **Validate Files** button is
  pressed. Validation statuses are shown under each uploaded file name.
* After validation, clicking the status label expands the file row to reveal all
  validation units checked for that file. The width of the details section now
  matches the uploaded file row so the canvas layout is unaffected. Failed
  checks appear first and the list scrolls horizontally when there are many
  validations. Each badge shows the validation name, the column and type, and
  whether it passed or failed.

