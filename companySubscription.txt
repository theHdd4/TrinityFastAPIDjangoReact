The Django backend separates tenant management from subscription tracking.
Tenants define the database schema and are created via the `apps.tenants`
application. The subscriptions app stores company specific limits. Two models
are available:

* **Company** – linked one-to-one with each tenant; holds optional metadata.
* **SubscriptionPlan** – records allowed seats, project cap and renewal date
  for a company.

Viewsets under `apps.subscriptions` provide CRUD endpoints at
`/api/subscriptions/companies/` and `/api/subscriptions/subscription-plans/`.
During tenant creation the `TenantSerializer` checks for `seats_allowed` and
`project_cap` fields and automatically creates a Company with a default plan.

**Data flow**

1. A POST to `/api/tenants/tenants/` creates the tenant record and optional
   subscription details. The serializer runs in the public schema and creates the
   schema, domains and a `Company` row if seat or project limits are provided.
2. A `SubscriptionPlan` linked to that company is also created so the allowed
   seats and project cap can be enforced.
3. Subsequent API calls can retrieve or update the subscription limits via the
   subscriptions endpoints while the tenant tables live in their own schema.

To verify:
1. Start the backend with `docker-compose up --build`.
2. Create a tenant including `seats_allowed` and `project_cap`.
3. Run `curl http://localhost:8000/api/subscriptions/companies/` to see the
   created Company and plan.
